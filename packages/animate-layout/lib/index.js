var t,e,s,a,n,i,l,c,r,o,h,p,m,d,y,u,S=Object.defineProperty,f=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable,k=(t,e,s)=>e in t?S(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,C=(t,e)=>{for(var s in e||(e={}))g.call(e,s)&&k(t,s,e[s]);if(f)for(var s of f(e))b.call(e,s)&&k(t,s,e[s]);return t},$=(t,e,s)=>(k(t,"symbol"!=typeof e?e+"":e,s),s),w=(t,e,s)=>(((t,e,s)=>{if(!e.has(t))throw TypeError("Cannot "+s)})(t,e,"read from private field"),s?s.call(t):e.get(t)),A=(t,e,s)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,s)};const D="animate-el",x={empty:/^\s+/,comment:/^(\/\*)(((?!\*\/)[\s\S])+)(\*\/)/,text:/[^\n]+/,CSS:/^\S+\s*{\s*([a-z-]+\s*:(\s*[^{};\s]+\s*)+;\s*)*}/,CSSDetail:{selector:/^[^{\s]+/,attrs:/^{\s*([a-z-]+\s*:(\s*[^{};\s]+\s*)+;\s*)*}/},CSSAttrDetail:{start:/^{/,end:/^}/,attr:/^([a-z-]+\s*:(\s*[^{};\s]+\s*)+;){1}/,isAttrKey:/^[a-z-]+\s*:/,attrKey:/^[a-z-]+/,colon:/^:/,isAttrVal:/^(\s*[^{};\s]+\s*)+;/,attrVal:/^(\s*[^{};\s]+\s*)+/,semicolon:/^;/}},N={cursor:!0,speed:150,delay:1500,delayVal:[".","!"]};function T(t,e){const s=document.createElement(t);return Object.entries(e).forEach((([t,e])=>{var a;"data"===t&&"object"===(a=e,Object.prototype.toString.call(a).toLowerCase().replace(/^\[object (\w+)\]$/,"$1"))?Object.entries(e).forEach((([t,e])=>{s.dataset[t]=e})):"string"==typeof e&&s.setAttribute(t,e)})),s}function W(t){let e=document.head.getElementsByTagName("style")[0];e||(e=document.createElement("style"),document.head.append(e));const s=document.createTextNode(t);e.append(s)}class M{constructor(S){$(this,"pause"),$(this,"fns"),$(this,"options"),$(this,"root"),A(this,t,(t=>{const{el:s}=t;w(this,e).call(this,s)})),A(this,e,(t=>{W(`\n    @keyframes flashing {\n      form {\n        opacity: 1;\n      }\n      to {\n        opacity: 0;\n      }\n    }\n\n    ${t} {\n      white-space: pre-wrap;\n    }\n    .${D}-cursor-flashing::after {\n      content: '_';\n      display: inline-block;\n      animation-name: flashing;\n      animation-iteration-count: infinite;\n      animation-timing-function: cubic-bezier(1, 0, 0, 1);\n      animation-duration: 1s;\n    }\n    `)})),A(this,s,((t,e)=>{const s=this;return new Promise((a=>{setTimeout((()=>{a(e.call(s))}),t)}))})),A(this,a,(t=>{const e=this.fns.shift();"function"==typeof e&&("number"==typeof t?setTimeout(e,t):e())})),A(this,n,((t,e,n)=>{if(!t)return;const i=document.createTextNode("");this.fns.push((()=>{e.append(i),w(this,a).call(this)}));const{speed:l,delay:c,delayVal:r}=this.options,o=t.length;let h=0;for(;h<o;){const e=t[h];if(!e)break;h+=1,this.fns.push((()=>{w(this,s).call(this,l,(()=>{i.appendData(e);const t=n&&r.includes(e)?c-l:void 0;w(this,a).call(this,t)}))}))}})),A(this,i,((t,e)=>{const{handleArr:s,root:a,cb:n}=e;if("string"!=typeof t||t.length<=0)return"function"==typeof n?n():void 0;const l=s.length;for(let c=0;c<l;c++){const n=s[c];if(n.match(t)){const s=n.action(t,a);w(this,i).call(this,s,e);break}}})),A(this,l,((t,e)=>{const{cursor:s}=this.options,{el:i,regexp:l,htmlType:c,className:r="",handleFn:o,delaySta:h,addCursorFlashing:p}=e;let m;const d=t.replace(l,(t=>(m=t,"")));if(m){let t=i;c&&(t=T(c,{className:r}),s&&p&&this.fns.push((()=>{t.className+=`${t.className} ${D}-cursor-flashing`,w(this,a).call(this)})),this.fns.push((()=>{i.append(t),w(this,a).call(this)}))),"function"==typeof o?o(m,t):w(this,n).call(this,m,t,h),s&&p&&this.fns.push((()=>{t.className=t.className.replace(`${D}-cursor-flashing`,""),w(this,a).call(this)}))}return[m,d]})),A(this,c,((t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"div",delaySta:!0,addCursorFlashing:!0,regexp:x.comment,className:`${D}-comment ${D}-block`});return s})),A(this,r,((t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSDetail.selector,className:`${D}-css-selector`});return s})),A(this,o,((t,e)=>{const s=[{match:t=>x.CSSAttrDetail.isAttrKey.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.attrKey,className:`${D}-attr-key`});return s}},{match:t=>x.empty.test(t),action:w(this,y)},{match:t=>x.CSSAttrDetail.colon.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.colon,className:`${D}-colon ${D}-colon-css`});return s}},{match:t=>x.CSSAttrDetail.isAttrVal.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.attrVal,className:`${D}-attr-val`});return s}},{match:t=>x.CSSAttrDetail.semicolon.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.semicolon,className:`${D}-semicolon ${D}-semicolon-css`});return s}}];w(this,i).call(this,t,{handleArr:s,root:e})})),A(this,h,((t,e)=>{const s=[{match:t=>x.CSSAttrDetail.start.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.start,className:`${D}-brackets ${D}-brackets-start ${D}-brackets-css`});return s}},{match:t=>x.empty.test(t),action:w(this,y)},{match:t=>x.CSSAttrDetail.attr.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,delaySta:!1,regexp:x.CSSAttrDetail.attr,handleFn:w(this,o)});return s}},{match:t=>x.CSSAttrDetail.end.test(t),action:(t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"span",delaySta:!1,regexp:x.CSSAttrDetail.end,className:`${D}-brackets ${D}-brackets-end ${D}-brackets-css`});return s}}];w(this,i).call(this,t,{handleArr:s,root:e})})),A(this,p,((t,e)=>{const s=[{match:t=>x.CSSDetail.selector.test(t),action:w(this,r)},{match:t=>x.empty.test(t),action:w(this,y)},{match:t=>x.CSSDetail.attrs.test(t),action:w(this,h)}];w(this,i).call(this,t,{handleArr:s,root:e})})),A(this,m,((t,e)=>{const[s,n]=w(this,l).call(this,t,{el:e,htmlType:"div",delaySta:!1,addCursorFlashing:!0,regexp:x.CSS,className:`${D}-css ${D}-code ${D}-block`,handleFn:w(this,p)});return s&&this.fns.push((()=>{W(`${this.options.el} ${s}`),w(this,a).call(this)})),n})),A(this,d,((t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,htmlType:"div",delaySta:!0,addCursorFlashing:!0,regexp:x.text,className:`${D}-text ${D}-block`});return s})),A(this,y,((t,e)=>{const[,s]=w(this,l).call(this,t,{el:e,delaySta:!1,regexp:x.empty});return s})),A(this,u,(t=>{const e=[{match:t=>x.empty.test(t),action:(t,e)=>w(this,y).call(this,t.replace(/\n/,""),e)},{match:t=>x.comment.test(t),action:w(this,c)},{match:t=>x.CSS.test(t),action:w(this,m)},{match:t=>x.text.test(t),action:w(this,d)}];w(this,i).call(this,t,{handleArr:e,root:this.root})})),$(this,"start",(()=>{const{sourceData:t}=this.options;w(this,u).call(this,t),w(this,s).call(this,0,(()=>w(this,a).call(this)))}));const{el:f}=S;this.fns=[],this.pause=!1,this.options=C(C({},N),S);const g=document.querySelector(f);if(!g)throw new Error("请传入正确的 el 节点");this.root=g,w(this,t).call(this,S)}}t=new WeakMap,e=new WeakMap,s=new WeakMap,a=new WeakMap,n=new WeakMap,i=new WeakMap,l=new WeakMap,c=new WeakMap,r=new WeakMap,o=new WeakMap,h=new WeakMap,p=new WeakMap,m=new WeakMap,d=new WeakMap,y=new WeakMap,u=new WeakMap;export{M as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
